# Python –¢–∏–∂–¥–µ–Ω—å 1 - –ú–∞–ª–µ–Ω—å–∫—ñ –≤–ø—Ä–∞–≤–∏
# ==================================

# üîπ –ë–∞–∑–æ–≤—ñ –∑–º—ñ–Ω–Ω—ñ —Ç–∞ –æ–ø–µ—Ä–∞—Ü—ñ—ó

# 1. –í–∏–≤–µ–¥–∏ —Ä—è–¥–æ–∫ "Hello, World!".
print("Hello, World!")

# 2. –ó–∞–ø–∏—Ç–∞–π —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ –¥–≤–∞ —á–∏—Å–ª–∞ —ñ –≤–∏–≤–µ–¥–∏ —ó—Ö —Å—É–º—É.
x, y = input("Enter two numbers separated by space: ").split()
print(f'The sum is: {int(x) + int(y)}')

# 3. –û–±—á–∏—Å–ª–∏ –≤–∏—Ä–∞–∑ (17 * 3) + (22 / 2) —ñ –≤–∏–≤–µ–¥–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç.
result = (17 * 3) + (22 / 2)
print(f'The result of the expression is: {result}')

# 4. –ó–∞–ø–∏—Ç–∞–π —á–∏—Å–ª–æ —ñ –ø–µ—Ä–µ–≤—ñ—Ä, —á–∏ —î –≤–æ–Ω–æ –ø–∞—Ä–Ω–∏–º –∞–±–æ –Ω–µ–ø–∞—Ä–Ω–∏–º.
doubles = int(input("Enter a number to check if it is a pair or not: "))
if doubles % 2 == 0:
    print(f'The numper {doubles} is a pair')
else:
    print(f'the number {doubles} is not a pair')

# 5. –ó–∞–ø–∏—Ç–∞–π —Ç—Ä–∏ —á–∏—Å–ª–∞ —ñ –≤–∏–≤–µ–¥–∏ –Ω–∞–π–±—ñ–ª—å—à–µ –∑ –Ω–∏—Ö.
x, y, z = input("Enter three numbers separated by space to find the biggest:").split()
biggest = max(int(x), int(y), int(z))
print(f'The biggest number is: {biggest}')

# üîπ –†—è–¥–∫–∏
# 6. –ó–∞–ø–∏—Ç–∞–π —Ä—è–¥–æ–∫ —É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á–∞ —ñ –≤–∏–≤–µ–¥–∏ –π–æ–≥–æ –¥–æ–≤–∂–∏–Ω—É.
print(f'String lenth: {len(input("Enter a string to check is length: "))}')

# 7. –ü–µ—Ä–µ–≤–µ—Ä–Ω–∏ —Ä—è–¥–æ–∫ "python" ‚Üí "nohtyp".
print('Reversed string "python": ' + 'python'[::-1])

# 8. –ü–æ—Ä–∞—Ö—É–π—Ç–µ, —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –ª—ñ—Ç–µ—Ä–∞ "a" –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è –≤ —Ä—è–¥–∫—É.
string = input("Enter a string to count how many times the letter 'a' occurs: ")
count_a = string.lower().count('a')
print(f'The letter "a" occurs {count_a} times in the string.')

# 9. –ü–µ—Ä–µ–≤—ñ—Ä, —á–∏ —î –≤–≤–µ–¥–µ–Ω–∏–π —Ä—è–¥–æ–∫ –ø–∞–ª—ñ–Ω–¥—Ä–æ–º–æ–º.
palindrom = input("Enter a string to check if it is a palindrom: ")
if palindrom == palindrom[::-1]:
    print(f'The string "{palindrom}" is a palindrom')
else:
    print(f'The string "{palindrom}" is not a palindrom')

# 10. –ó–∞–ø–∏—Ç–∞–π —ñ–º‚Äô—è —Ç–∞ –≤—ñ–∫, –≤–∏–≤–µ–¥–∏: "–ú–µ–Ω–µ –∑–≤–∞—Ç–∏ –Ü–ú'–Ø, –º–µ–Ω—ñ X —Ä–æ–∫—ñ–≤".
name, age = input("Enter your name and age separated by space: ").split()
print(f'My name is {name}, I am {age} years old.')


# üîπ –°–ø–∏—Å–∫–∏
# 11. –ó–Ω–∞–π–¥–∏ —Å—É–º—É –µ–ª–µ–º–µ–Ω—Ç—ñ–≤ —Å–ø–∏—Å–∫—É [1, 2, 3, 4, 5].
numbers = [1, 2, 3, 4, 5]
print(f'Sum og the list elements: {sum(numbers)}')

# 12. –ó–Ω–∞–π–¥–∏ —Å–µ—Ä–µ–¥–Ω—î –∞—Ä–∏—Ñ–º–µ—Ç–∏—á–Ω–µ —Å–ø–∏—Å–∫—É [10, 20, 30, 40].
average = sum([10, 20, 30, 40]) / len([10, 20, 30, 40])
print(f'The average of the list is: {average}')

# 13. –ó–Ω–∞–π–¥–∏ –º—ñ–Ω—ñ–º–∞–ª—å–Ω–µ —ñ –º–∞–∫—Å–∏–º–∞–ª—å–Ω–µ —á–∏—Å–ª–æ —É —Å–ø–∏—Å–∫—É.
numbers = [5, 3, 8, 1, 4]
min_num = min(numbers)
max_num = max(numbers)
print(f'Minimum number in the list is: {min_num}, maximum number in the list is: {max_num}')

# 14. –Ü–∑ –º–∞—Å–∏–≤—É [1, 1, 2, 3, 3, 4] —Å—Ç–≤–æ—Ä–∏ —Å–ø–∏—Å–æ–∫ —Ç—ñ–ª—å–∫–∏ –∑ —É–Ω—ñ–∫–∞–ª—å–Ω–∏—Ö –µ–ª–µ–º–µ–Ω—Ç—ñ–≤.
unique_numbers = list(set([1, 1, 2, 3, 3, 4]))
print(f'List with unique elements: {unique_numbers}')

# 15. –î–∞–Ω–æ —Å–ø–∏—Å–æ–∫ —á–∏—Å–µ–ª, –≤–∏–≤–µ–¥–∏ –ø–µ—Ä—à—ñ 3 —ñ –æ—Å—Ç–∞–Ω–Ω—ñ 2 –µ–ª–µ–º–µ–Ω—Ç–∏.
numbers = [10, 20, 30, 40, 50, 60, 70]
print(f'First 3 elements: {numbers[:3]}, last 2 elements: {numbers[-2:]}')


# üîπ –°–ª–æ–≤–Ω–∏–∫–∏

# 16. –°—Ç–≤–æ—Ä–∏ —Å–ª–æ–≤–Ω–∏–∫ –∑ –∫–ª—é—á–∞–º–∏ "name", "age", "city" —ñ –∑–∞–¥–∞–π –∑–Ω–∞—á–µ–Ω–Ω—è.
person = {
    "name": "Andrij",
    "age": 30,
    "city": "Kyiv"
}
print(f'Person dictionary: {person}')

# 17. –í–∏–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–Ω—è –∑–∞ –∫–ª—é—á–µ–º "name".
print(f'Name from the dictionary: {person["name"]}')

# 18. –î–∞–Ω–æ —Ç–µ–∫—Å—Ç, –ø–æ—Ä–∞—Ö—É–π, —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è –∫–æ–∂–Ω–µ —Å–ª–æ–≤–æ (–≤–∏–∫–æ—Ä–∏—Å—Ç–∞–π —Å–ª–æ–≤–Ω–∏–∫).
text = "this is a sample text this text is for counting words"
word_count = {}
for word in text.split():
    if word in word_count:
        word_count[word] += 1
    else:
        word_count[word] = 1
print(f'Word count: {word_count}')

# 19. –°—Ç–≤–æ—Ä–∏ —Å–ª–æ–≤–Ω–∏–∫: {"fruits": ["apple", "banana"], "numbers": [1, 2, 3]}, –≤–∏–≤–µ–¥–∏ –¥—Ä—É–≥–∏–π —Ñ—Ä—É–∫—Ç.
my_dict = {
    "fruits": ["apple", "banana"],
    "numbers": [1, 2, 3]
}
print(f'Second fruit in the list: {my_dict["fruits"][1]}')

# 20. –í–≤–µ–¥–∏ —Ä—è–¥–æ–∫ —ñ —Å—Ç–≤–æ—Ä–∏ —Å–ª–æ–≤–Ω–∏–∫: –∫–ª—é—á ‚Äî —Å–∏–º–≤–æ–ª, –∑–Ω–∞—á–µ–Ω–Ω—è ‚Äî —Å–∫—ñ–ª—å–∫–∏ —Ä–∞–∑—ñ–≤ –≤—ñ–Ω –∑—É—Å—Ç—Ä—ñ—á–∞—î—Ç—å—Å—è.
input_string = input("Enter a string to create a dictionary with character counts: ")
char_count = {}
for char in input_string:
    if char in char_count:
        char_count[char] += 1
    else:
        char_count[char] = 1
print(f'Character count dictionary: {char_count}')